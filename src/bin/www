#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config(); // Must be the first import
const debug = require('debug')('file:server');
const http = require('http');

// Port Setup
const port = normalizePort(process.env.PORT || '5051');

// Normalize a port into a number, string, or false.
function normalizePort(val) {
	const port = parseInt(val, 10);
	// named pipe
	if (isNaN(port)) return val;
	// port number
	if (port >= 0) return port;
	return false;
}

// Event listener for HTTP server 'error' event.
function onError(error) {
	if (error.syscall !== 'listen') throw error;

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(`${bind} requires elevated privileges`);
			process.exit(1);
		case 'EADDRINUSE':
			console.error(`${bind} is already in use`);
			process.exit(1);
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server 'listening' event.
 */
function onListening() {
	console.info(`âœ…Listening on ${port}`);
	debug('Listening on ' + port);
}

// Handle uncaught exceptions
process.on('uncaughtException', (uncaughtExc) => {
	// Won't execute
	console.error('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down..');
	console.error('uncaughtException Err::', uncaughtExc);
	process.exit(1);
})

	// Setup an express server and define port to listen all incoming requests for this application
	; (async () => {
		const app = require('../app');
		const dbClient = require('../services/prisma');

		const db = dbClient.default;

		try {
			console.log('warn', 'ðŸ¤žTrying to connect MYSQL');
			await db.$connect();
			console.info('âœ…Connection has been established with MYSQL.');
		} catch (error) {
			console.error('ðŸ’¥Error while connecting MYSQL', error);
		}

		// Initialize Development Data
		// require('../initialize/index');

		// Get port from environment and store in Express.
		app.set('port', port);
		// In case of an error
		app.on('error', (appErr, appCtx) => {
			console.error('app error', appErr.stack);
			console.error('on url', appCtx.req.url);
			console.error('with headers', appCtx.req.headers);
		});

		// Create HTTP server.
		const server = http.createServer(app);

		const closeAllExternalServices = async () => {
			// Try disconnecting Prisma
			try {
				console.log('warn', 'ðŸ¤žTrying to disconnect MYSQL');
				await db.$disconnect();
				console.info('âœ…Connection has been closed with MYSQL.');
			} catch (error) {
				console.error('ðŸ’¥Error while disconnecting MYSQL', error);
			}
		};

		// Handle unhandled promise rejections
		process.on('unhandledRejection', async (unhandledRejection) => {
			console.log('warn', 'UNHANDLED REJECTION! ðŸ’¥ Shutting down...');
			console.error('unhandledRejection Err::', unhandledRejection);
			// Try disconnecting to all external services
			await closeAllExternalServices();
			// Close server & exit process
			server.close(() => process.exit(1));
		});

		process.on('SIGINT', async () => {
			console.log('warn', 'ðŸ‘‹ SIGINT RECEIVED. Shutting down gracefully');
			// Try disconnecting to all external services
			await closeAllExternalServices();
			console.log('warn', 'ðŸ’¥ Process terminated!');
			server.close(() => process.exit(0));
		});

		// Listen on provided port, on all network interfaces.
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening);
	})();
